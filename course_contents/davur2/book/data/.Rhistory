tmp <- x[, selection]
names(tmp) <- c("ID", "T0", "T1", "T2", "T3", y.label)
tmp[,1] <- as.factor(tmp[,1])
tmp.melt <- melt(tmp, id = c("ID", y.label))
#print(head(tmp.melt))
p <- ggplot(tmp.melt, aes(x=variable, y=value, color=tmp.melt[,y.label], na.rm=TRUE)) +
stat_summary(fun.data=mean.sd, geom = "pointrange", color = "darkred", size = 1.5) +
geom_jitter(position=position_jitter(w = 0.2, h = 0.05),
size = 2.5,
alpha = 0.7) +
labs(y = "score", x = "") +
theme(legend.title = "y.label")
p
}
plot_aspect_nominal(cmai, c(1, 5:8, 3), "Huisdier")
library(reshape)
library(ggplot2)
mean.sd <- function(x) {
c(y = mean(x, na.rm=TRUE),
ymin=(mean(x, na.rm=TRUE) - sd(x, na.rm=TRUE)),
ymax=(mean(x, na.rm=TRUE) + sd(x, na.rm=TRUE)))
}
plot_aspect_quantile <- function(x, selection, y.label, highlight.high = T) {
tmp <- x[, selection]
if (highlight.high) {
tmp$high.at.onset <- ifelse(tmp[,2] > quantile(tmp[,2], na.rm=TRUE)[4], "highlight", "geen highlight")
} else {
tmp$high.at.onset <- ifelse(tmp[,2] < quantile(tmp[,2], na.rm=TRUE)[2], "highlight", "geen highlight")
}
names(tmp) <- c("ID", "T0", "T1", "T2", "T3", "niveau") #niveau slaat op quantiel groep
tmp[,1] <- as.factor(tmp[,1])
tmp.melt <- melt(tmp, id = c("ID", "niveau"))
p <- ggplot(tmp.melt, aes(x=variable, y=value, na.rm=TRUE)) +
stat_summary(fun.data=mean.sd, geom = "pointrange", color = "darkred", size = 1.5) +
geom_jitter(position=position_jitter(w = 0.2, h = 0.05), size = 2.5, alpha = 0.7, aes(colour = niveau)) + labs(y = y.label, x = "") +
theme(legend.position="none")
p
}
plot_aspect_nominal <- function(x, selection, y.label) {
print(y.label)
tmp <- x[, selection]
names(tmp) <- c("ID", "T0", "T1", "T2", "T3", y.label)
tmp[,1] <- as.factor(tmp[,1])
tmp.melt <- melt(tmp, id = c("ID", y.label))
#print(head(tmp.melt))
p <- ggplot(tmp.melt, aes(x=variable, y=value, color=tmp.melt[,y.label], na.rm=TRUE)) +
stat_summary(fun.data=mean.sd, geom = "pointrange", color = "darkred", size = 1.5) +
geom_jitter(position=position_jitter(w = 0.2, h = 0.05),
size = 2.5,
alpha = 0.7) +
labs(y = "score", x = "", fill=y.label)
p
}
plot_aspect_nominal(cmai, c(1, 5:8, 3), "Huisdier")
library(reshape)
library(ggplot2)
mean.sd <- function(x) {
c(y = mean(x, na.rm=TRUE),
ymin=(mean(x, na.rm=TRUE) - sd(x, na.rm=TRUE)),
ymax=(mean(x, na.rm=TRUE) + sd(x, na.rm=TRUE)))
}
plot_aspect_quantile <- function(x, selection, y.label, highlight.high = T) {
tmp <- x[, selection]
if (highlight.high) {
tmp$high.at.onset <- ifelse(tmp[,2] > quantile(tmp[,2], na.rm=TRUE)[4], "highlight", "geen highlight")
} else {
tmp$high.at.onset <- ifelse(tmp[,2] < quantile(tmp[,2], na.rm=TRUE)[2], "highlight", "geen highlight")
}
names(tmp) <- c("ID", "T0", "T1", "T2", "T3", "niveau") #niveau slaat op quantiel groep
tmp[,1] <- as.factor(tmp[,1])
tmp.melt <- melt(tmp, id = c("ID", "niveau"))
p <- ggplot(tmp.melt, aes(x=variable, y=value, na.rm=TRUE)) +
stat_summary(fun.data=mean.sd, geom = "pointrange", color = "darkred", size = 1.5) +
geom_jitter(position=position_jitter(w = 0.2, h = 0.05), size = 2.5, alpha = 0.7, aes(colour = niveau)) + labs(y = y.label, x = "") +
theme(legend.position="none")
p
}
plot_aspect_nominal <- function(x, selection, y.label) {
print(y.label)
tmp <- x[, selection]
names(tmp) <- c("ID", "T0", "T1", "T2", "T3", y.label)
tmp[,1] <- as.factor(tmp[,1])
tmp.melt <- melt(tmp, id = c("ID", y.label))
#print(head(tmp.melt))
p <- ggplot(tmp.melt, aes(x=variable, y=value, color=tmp.melt[,y.label], na.rm=TRUE)) +
stat_summary(fun.data=mean.sd, geom = "pointrange", color = "darkred", size = 1.5) +
geom_jitter(position=position_jitter(w = 0.2, h = 0.05),
size = 2.5,
alpha = 0.7) +
labs(y = "score", x = "") +
scale_fill_discrete(name = "New Legend Title")
p
}
plot_aspect_nominal(cmai, c(1, 5:8, 3), "Huisdier")
plot_aspect_nominal <- function(x, selection, y.label) {
print(y.label)
tmp <- x[, selection]
names(tmp) <- c("ID", "T0", "T1", "T2", "T3", y.label)
tmp[,1] <- as.factor(tmp[,1])
tmp.melt <- melt(tmp, id = c("ID", y.label))
#print(head(tmp.melt))
p <- ggplot(tmp.melt, aes(x=variable, y=value, color=tmp.melt[,y.label], na.rm=TRUE)) +
stat_summary(fun.data=mean.sd, geom = "pointrange", color = "darkred", size = 1.5) +
geom_jitter(position=position_jitter(w = 0.2, h = 0.05),
size = 2.5,
alpha = 0.7) +
labs(y = "score", x = "", fill = "FUBAR")
p
}
plot_aspect_nominal(cmai, c(1, 5:8, 3), "Huisdier")
plot_aspect_nominal <- function(x, selection, y.label) {
print(y.label)
tmp <- x[, selection]
names(tmp) <- c("ID", "T0", "T1", "T2", "T3", y.label)
tmp[,1] <- as.factor(tmp[,1])
tmp.melt <- melt(tmp, id = c("ID", y.label))
#print(head(tmp.melt))
p <- ggplot(tmp.melt, aes(x=variable, y=value, color=tmp.melt[,y.label], na.rm=TRUE)) +
stat_summary(fun.data=mean.sd, geom = "pointrange", color = "darkred", size = 1.5) +
geom_jitter(position=position_jitter(w = 0.2, h = 0.05),
size = 2.5,
alpha = 0.7) +
labs(y = "score", x = "", color = "FUBAR")
p
}
plot_aspect_nominal(cmai, c(1, 5:8, 3), "Huisdier")
plot_aspect_nominal <- function(x, selection, y.label) {
print(y.label)
tmp <- x[, selection]
names(tmp) <- c("ID", "T0", "T1", "T2", "T3", y.label)
tmp[,1] <- as.factor(tmp[,1])
tmp.melt <- melt(tmp, id = c("ID", y.label))
#print(head(tmp.melt))
p <- ggplot(tmp.melt, aes(x=variable, y=value, color=tmp.melt[,y.label], na.rm=TRUE)) +
stat_summary(fun.data=mean.sd, geom = "pointrange", color = "darkred", size = 1.5) +
geom_jitter(position=position_jitter(w = 0.2, h = 0.05),
size = 2.5,
alpha = 0.7) +
labs(y = "score", x = "", color = y.label)
p
}
plot_aspect_nominal(cmai, c(1, 5:8, 3), "Huisdier")
?paste
paste("welcome", "to", "R")
paste(c("welcome", "to", "R"))
paste(c("welcome", "to", "R"), "+")
paste("welcome", "to", "R")
paste0("welcome", "to", "R", sep=" ")
paste0("welcome", "to", "R", sep=" ")
paste0("welcome ", "to ", "R")
paste("welcome ", "to ", "R")
paste("welcome ", "to ", "R", sep=" ")
paste("welcome ", "to ", "R", sep="")
?sqrt
?abs
?c
example(c)
examples(c)
example("c")
c(1, 3, "a")
source("rmarkdown_knitr_header.R")
par(mar=c(4, 4, 1.5, 0))
prot_data <- read.table(file = "data/protein_processing_pred.txt",
header = TRUE,
sep = "\t")
dim(prot_data)
protein_data <- read.table(file = "data/protein_processing_pred.txt",
header = TRUE,
sep = "\t")
dim(protein_data)
lapply(protein_data, type)
lapply(protein_data, class)
names(protein_data)
colnames(protein_data)
str(protein_data)
protein_data <- read.table(file = "data/protein_processing_pred.txt",
header = TRUE,
sep = "\t",
dec = ",")
str(protein_data)
protein_data <- read.table(file = "data/protein_processing_pred.txt",
header = TRUE,
sep = "\t",
dec = ",")
protein_data <- read.table(file = "data/protein_processing_pred.txt",
header = TRUE,
sep = "\t",
dec = ",")
dim(protein_data)
colnames(protein_data)
dim(protein_data)
protein_data <- read.table(file = "data/protein_processing_pred.txt",
header = TRUE,
sep = "\t",
dec = ",")
colnames(protein_data)
dim(protein_data)
dim(protein_data)tail(protein_data)
tail(protein_data)
tail(protein_data, n=10)
tail(protein_data, n=20)
tail(protein_data, n=20)
tail(protein_data)
protein_data <- read.table(file = "data/protein_processing_pred.txt",
header = TRUE,
sep = ";",
dec = ",")
colnames(protein_data)
dim(protein_data)
tail(protein_data, n=20)
protein_data <- read.table(file = "data/protein_processing_pred.txt",
header = TRUE,
sep = ";",
dec = ",")
colnames(protein_data)
dim(protein_data)
#tail(protein_data, n=20)
protein_data <- read.table(file = "data/protein_processing_pred.txt",
header = TRUE,
sep = ";",
dec = ",")
colnames(protein_data)
dim(protein_data)
#tail(protein_data, n=20)
protein_data <- read.table(file = "data/protein_processing_pred.csv",
header = TRUE,
sep = ";",
dec = ",")
colnames(protein_data)
dim(protein_data)
#tail(protein_data, n=20)
protein_data <- read.table(file = "data/protein_processing_pred.csv",
header = TRUE,
sep = ";",
dec = ",",
comment.char = "")
colnames(protein_data)
dim(protein_data)
#tail(protein_data, n=20)
head(protein_data)
head(protein_data[,1])
head(protein_data$SignalP_name)
tail(protein_data$SignalP_name)
protein_data <- read.table(file = "data/protein_processing_pred.csv",
header = TRUE,
sep = ";",
dec = ",",
comment.char = "")
colnames(protein_data)
dim(protein_data)
#tail(protein_data, n=20)
protein_data <- read.table(file = "data/protein_processing_pred.csv",
header = TRUE,
sep = ";",
dec = ",",
comment.char = "")
colnames(protein_data)
dim(protein_data)
#tail(protein_data, n=20)
tail(protein_data, n=20)
tail(protein_data[,1], n=20)
tail(protein_data[,3], n=20)
protein_data[,3]
protein_data <- read.table(file = "data/protein_processing_pred.csv",
header = TRUE,
sep = ";",
dec = ",",
comment.char = "")
colnames(protein_data)
dim(protein_data)
#tail(protein_data, n=20)
protein_data <- read.table(file = "data/protein_processing_pred.csv",
header = TRUE,
sep = ";",
dec = ",",
comment.char = "")
colnames(protein_data)
dim(protein_data)
#tail(protein_data, n=20)
protein_data[,3]
protein_data <- read.table(file = "data/protein_processing_pred.csv",
header = TRUE,
sep = ";",
dec = ",",
comment.char = "")
colnames(protein_data)
dim(protein_data)
#tail(protein_data, n=20)
protein_data <- read.table(file = "data/protein_processing_pred.csv",
header = TRUE,
sep = ";",
dec = ",")
colnames(protein_data)
dim(protein_data)
str(protein_data)
protein_data <- read.table(file = "data/protein_processing_pred.csv",
header = TRUE,
sep = ";",
dec = ",",
as.is = c(1, 2, 3, 21))
str(protein_data)
prot_data_columns <- colnames(protein_data) ##get the column names
head(prot_data_columns) ##print a few
prot_data_columns[3] ## fetch the third
prot_data_columns[c(3,1,4)]
prot_data_columns[5:8] # use a series of indices
prot_data_
prot_data_columns
prot_data_columns[17:21] # use a series of indices
table(protein_data$SignalP_YesNo)
dim(protein_data)
letters
letters(2)
letters[2]
letters[26]
letters[c(8, 5, 12, 12, 15)]
letters[3:6]
paste0(letters[3:6])
paste0(letters[3:6], collapse = )
paste0(letters[3:6], collapse = "")
?paste
10
10.0
as.integer(10)
sqrt(36) == 36^0.5
sqrt(36) == 36^0.5 == 36**0.5
sqrt(36) == 36**0.5
source("rmarkdown_knitr_header.R")
par(mar=c(4, 4, 1.5, 0))
sqrt(36)
36^0.5
paste(1:3)
paste(1:3, " ")
paste(1:3, collapse = T )
paste(1:3, collapse = "+")
paste(1:3, collapse = "+", sep = "-")
paste(1:3. 4:5, collapse = "+", sep = "-")
paste(1:3, 4:5, collapse = "+", sep = "-")
pi
x <- 20
y <- 10
log10(x*y)
log10x*y
log10(x)*log10(y)
log10(x)+log10(y)
c(1, "a", TRUE)
c(1, TRUE)
source("rmarkdown_knitr_header.R")
par(mar=c(4, 4, 1.5, 0))
c(1, "a", TRUE)
c(1, TRUE)
c(1, 2, 5)
grades <- c(3.4, 5.6, 8.3, 2.9, 7.2)
names(grades) <- c("Ian", "Mark", "Lara", "Rowan", "Iris")
grades
grades[grades >= 5.5] # passing grades
grades[grades == max(grades)]
grades <- c(3.4, 5.6, 8.3, 2.9, 6.8)
names(grades) <- c("Ian", "Mark", "Lara", "Rowan", "Iris")
grades
grades[grades >= 5.5]           # passing grades
grades[grades == max(grades)]   # highest grade
grades[grades >= 5.5 && grades <= 8] #average students
grades[grades >= 5.5]           # passing grades
grades[grades == max(grades)]   # highest grade
grades[grades >= 5.5 & grades <= 8] #average students
grades[grades > mean(grades) - 1 & grades < mean(grades) + 1]
grades[grades >= 5.5]              # passing grades
grades[grades == max(grades)]      # highest grade
grades[grades >= 5.5 & grades < 7] # average students
q == 1 || q == 4
q == 1 | q == 4
q <- c(2, 1, 4)
q > 2
q == 1
q <= 3
q == 1 | q == 4
(0.6*7.25)+(0.3*6.5)+(0.1*6.5)
66 -24
126/3
12^2
256**0.5
(3 * (4 + 8**0.5)) / 5**3
3e3
3E3
'a'
"a"
View(x)
View(x, y)
source("rmarkdown_knitr_header.R")
par(mar=c(4, 4, 1.5, 0))
nucleotides <- c("A", "C", "G", "T")
nucleotides[3]    # fetch the third
nucleotides[2]    # the second
participant_ids <- c("001", "002", "003", "004", "005", "006")
placebo_given <- c(FALSE, TRUE, TRUE, FALSE, TRUE, FALSE)
patient_responses <- c(76, 44, 38, 92, 28, 81)
names(placebo_given) <- participant_ids
names(patient_responses) <- participant_ids
placebo_given
patient_responses
##comment this out for pdf output
source("rmarkdown_knitr_header.R")
ggplot(data = airquality, aes(x = Temp, y = Ozone, color=as.factor(Month))) + geom_point() + labs(color="Month")
##comment this out for pdf output
source("rmarkdown_knitr_header.R")
par(mar=c(3,3,1,0))
library(ggplot2)
ggplot(data = airquality, aes(x = Temp, y = Ozone)) + geom_point()
with(airquality, plot(x = Temp, y = Ozone))
ggplot(data = airquality, aes(x = Temp, y = Ozone, color=as.factor(Month))) + geom_point() + labs(color="Month")
setwd("~/onedrive_davur2/public/data/")
blocks <- read.table("data/ggplot2_elements.txt", sep=";", header = T)
blocks <- read.table("data/ggplot2_elements.txt", sep=";", header = T)
blacks[, 1:3]
blocks <- read.table("data/ggplot2_elements.txt", sep=";", header = T)
blocks[, 1:3]
blocks <- read.table("data/ggplot2_elements.txt", sep=";", header = T)
blocks[1:3,]
blocks <- read.table("data/ggplot2_elements.txt",
sep=";",
header = T,
as.character = 1)
blocks <- read.table("data/ggplot2_elements.txt",
sep=";",
header = T,
as.character = 2)
blocks <- read.table("data/ggplot2_elements.txt",
sep=";",
header = T,
as.is = 2)
blocks[1:3,]
blocks <- read.table("data/ggplot2_elements.txt",
sep=";",
header = T,
as.is = 1:2)
blocks[1:3,]
libary(kable)
library(kable)
blocks
kable(blocks)
kable(blocks[1:3,])
blocks <- read.table("data/ggplot2_elements.txt",
sep=";",
header = T,
as.is = 1:2)
kable(blocks[1:3,])
head(mpg)
p <- ggplot(data=mpg, aes(x=manufacturer, y=displ))
p
p + geom_boxplot()
str(p)
head(mpg)
p <- ggplot(data=mpg, aes(x=displ, y=hwy, colour=cyl)) + geom_point()
p
p <- ggplot(data=mpg, aes(x=displ, y=hwy, colour=as.factor(cyl)\) + geom_point()
p <- ggplot(data=mpg, aes(x=displ, y=hwy, colour=as.factor(cyl)) + geom_point()
p <- ggplot(data=mpg, aes(x=displ, y=hwy, colour=as.factor(cyl))) + geom_point()
p
p <- ggplot(data=mpg, aes(x=displ, y=hwy, colour=as.factor(cyl))) + geom_point() + labs(colour="cylinders")
p
ggplot(data=mpg, aes(x=displ, y=hwy, colour=as.factor(cyl))) + geom_point() + labs(colour="cylinders", x="FU")
ggplot(data=mpg, aes(x=displ, y=hwy, colour=as.factor(cyl))) + geom_point() + geom_smooth() + labs(colour="cylinders", x="FU")
ggplot(data=mpg, aes(x=displ, y=hwy) + geom_point(colour=as.factor(cyl))) + geom_smooth() + labs(colour="cylinders", x="FU")
ggplot(data=mpg, aes(x=displ, y=hwy) + geom_point(colour=as.factor(mpg$cyl))) + geom_smooth() + labs(colour="cylinders", x="FU")
ggplot(data=mpg, aes(x=displ, y=hwy) + geom_point(aes(colour=as.factor(mpg$cyl))) + geom_smooth() + labs(colour="cylinders", x="FU")
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=as.factor(mpg$cyl))) + geom_smooth() + labs(colour="cylinders", x="FU")
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=as.factor(cyl))) + geom_smooth() + labs(colour="cylinders", x="FU")
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=as.factor(cyl))) + geom_smooth() + labs(colour="cylinders")
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=as.factor(cyl))) + geom_smooth() + facet_grid(cols=cylinders)+  labs(colour="cylinders")
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=as.factor(cyl))) + geom_smooth() + facet_grid(cols=vars(cylinders))+  labs(colour="cylinders")
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=as.factor(cyl))) + geom_smooth() + facet_grid(cols=vars(cyl))+  labs(colour="cylinders")
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=as.factor(cyl))) + geom_smooth() + facet_grid(cols= . ~ cyl)+  labs(colour="cylinders")
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=as.factor(cyl))) + geom_smooth() + facet_grid(. ~ cyl)+  labs(colour="cylinders")
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=as.factor(cyl))) + geom_smooth() + facet_grid(drv ~ cyl)
kable(blocks[c(1:3, 7),])
kable(blocks[1:4,])
blocks <- read.table("data/ggplot2_elements.txt",
sep=";",
header = T,
as.is = 1:2)
kable(blocks[1:4,])
read.table("data/dose_response.txt", header = T, sep=";", as.is=1)
dose_response <- read.table("data/dose_response.txt", header = T, sep=";", colClasses="character", "int", "int")
dose_response <- read.table("data/dose_response.txt", header = T, sep=";", colClasses="character", "int", "int"))
dose_response <- read.table("data/dose_response.txt",
header = T,
sep=";",
colClasses="character", "int", "int")
dose_response <- read.table("data/dose_response.txt",
header = T,
sep=";",
colClasses=c("character", "int", "int"))
head(dose_response)
dose_response <- read.table("data/dose_response.txt",
header = T,
sep=";",
colClasses=c("character", "int", "int"))
?read.table
dose_response <- read.table("data/dose_response.txt",
header = T,
sep=";")
head(dose_response)
dose_response <- read.table("data/dose_response.txt",
header = T,
sep=";",
colClasses=c("character", "integer", "integer"))
head(dose_response)
library(reshape)
reshape::melt(data=dose_response)
?melt
?melt
